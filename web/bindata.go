// Code generated by go-bindata.
// sources:
// views/websockets.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsWebsocketsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xc1\x4e\xdc\x30\x10\x3d\x27\x5f\x31\xf5\x85\x44\xcb\xc6\xf7\x65\xb3\x48\x6d\x51\xa9\xc4\xaa\x52\x69\xc5\xa5\x17\x63\x0f\x9b\x94\xc4\x8e\x3c\x93\x4d\x51\xc5\xbf\x57\x8e\x43\x48\x11\xf4\xd0\x93\x2d\xcf\x9b\xf7\xe6\xcd\x8c\xb7\xef\xd6\x6b\xd8\xd6\xb6\xeb\x19\x6a\x53\x8a\xf1\x26\x80\x1f\x3a\x2c\x05\xe3\x2f\x16\x20\x77\xb0\x5e\xef\xd2\x88\xbc\xed\x99\x9d\x05\x67\x75\x53\xeb\xfb\x52\x10\x5a\x93\xe5\x62\x77\x8d\xd6\x6c\x65\x8c\x4e\xf8\xce\xe3\x48\xe9\x7a\x0e\x9c\xbb\xad\xec\x3c\xee\xd2\x2d\x69\x5f\x77\x0c\xe4\x75\x29\x64\xed\x6b\x5a\x0f\x54\xfc\xa4\x00\x88\xa1\x19\xb3\x4b\x93\xa3\xf2\x40\xba\xc2\x16\xa1\x04\xe3\x74\xdf\xa2\xe5\xa2\x71\x5a\x71\xed\x6c\xd1\x79\xc7\x4e\xbb\x06\xca\x12\x44\xc5\xdc\xd1\x46\xc0\x39\x88\x81\x48\xc0\x26\x9c\xe2\x2c\x92\x74\xce\xf3\xeb\x14\x21\x70\x0e\x99\xd8\x08\x58\xbd\x11\xcf\x03\x57\x60\x92\x12\x08\x11\x54\xd7\x15\x9f\x90\x33\x21\x51\x57\x4e\x9c\xc2\x40\xc5\xa5\xb2\xa6\x41\x9f\xe5\x39\x38\x0b\xad\xaa\x6d\x71\x70\x51\x7b\xa0\xef\x5f\xaf\xa0\x7c\x32\xb2\x02\xb1\x91\xf2\x75\xb5\xca\x11\x5b\x35\x82\x82\xf0\x4a\xc8\x01\x6f\xc9\xe9\x7b\x64\x71\x06\x91\x2e\x4e\x6b\xe1\xe5\x80\x7c\xd1\x60\xb8\xbe\x7f\xf8\x6c\xb2\x69\x88\xf9\xe4\x3c\xf6\xff\x5f\xf8\x69\x42\x79\x34\x78\x43\xa0\x5d\x8b\x04\x77\xde\xb5\xc0\x15\x82\xea\xd9\xad\x09\xfd\x11\x0d\x9c\x2c\x46\x76\x32\xcd\x67\x2c\x0f\x4a\xb0\x38\xc0\x0d\x65\xa3\xdd\x3c\x4d\xe2\x7b\xf1\xc5\x7e\x70\xd6\xa2\xe6\xec\xae\xb7\x3a\xb8\x84\x2c\x87\xdf\x69\x92\x44\xdd\xa2\xb6\x16\xfd\xe5\xb7\xfd\x15\xac\x4a\x10\xd7\xac\xb8\xa7\x0d\x4c\x49\x68\x7e\xd8\xd0\xf9\xc7\x50\xdd\xcc\xf8\xb1\x26\xfd\x3f\xa4\xcf\x79\x7f\xf1\x4a\x09\x1e\x95\x01\x3c\xa2\xe5\x85\xf1\xd1\xb3\x5f\xe8\x66\x42\x57\x8a\xc5\x29\x3c\xab\xb6\x74\x88\xc2\xca\x98\x3d\x12\xa9\x03\x8e\x6f\x13\xf5\x0c\x8c\x3f\xe5\x25\x52\xec\x71\x03\x61\x15\xc6\x99\x15\x47\xd5\xf4\x98\x83\x94\x30\xf8\x9a\x11\x5c\xef\x09\x9b\x23\x52\x9a\x3c\x15\x71\xd1\xd6\x3c\x97\xb1\xcc\x3a\x1b\x97\xd3\x1a\x08\xb1\x68\x05\x8c\x62\x05\xec\x46\x33\xf3\x22\xcd\xb6\x92\x45\x3a\x94\x61\xc3\x83\xb2\x6e\x50\xf9\x31\x63\x0c\xa7\xc9\xe3\xc2\xc5\x0b\x93\x6f\x76\xbc\xa5\x43\xd8\xf3\xa9\xc7\xe9\xfc\xb5\xff\x04\x00\x00\xff\xff\xbc\x7b\xeb\x4c\x70\x04\x00\x00")

func viewsWebsocketsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsWebsocketsHtml,
		"views/websockets.html",
	)
}

func viewsWebsocketsHtml() (*asset, error) {
	bytes, err := viewsWebsocketsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/websockets.html", size: 1136, mode: os.FileMode(420), modTime: time.Unix(1511574039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/websockets.html": viewsWebsocketsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"websockets.html": &bintree{viewsWebsocketsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

